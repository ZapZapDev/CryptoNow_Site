//ConnectWallet.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { PhantomWalletAdapter } from "@solana/wallet-adapter-phantom";
import { SolflareWalletAdapter } from "@solana/wallet-adapter-solflare";
import { GlowWalletAdapter } from "@solana/wallet-adapter-glow";
import { BackpackWalletAdapter } from "@solana/wallet-adapter-backpack";

type WalletType = "phantom" | "solflare" | "glow" | "backpack";

const SERVER_URL = 'https://zapzap666.xyz';

const walletButtonDesktop = document.getElementById("walletButtonDesktop") as HTMLButtonElement;
const walletButtonMobile = document.getElementById("walletButtonMobile") as HTMLButtonElement;
const walletModal = document.getElementById("walletModal") as HTMLDivElement;
const walletModalClose = document.getElementById("walletModalClose") as HTMLButtonElement;
const walletListButtons = document.querySelectorAll<HTMLButtonElement>("#walletList button[data-wallet]");

const solanaAdapters: Record<WalletType, any> = {
    phantom: new PhantomWalletAdapter(),
    solflare: new SolflareWalletAdapter(),
    glow: new GlowWalletAdapter(),
    backpack: new BackpackWalletAdapter()
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∫–æ—à–µ–ª–µ–∫
function isWalletInstalled(walletType: WalletType): boolean {
    switch(walletType) {
        case 'phantom':
            return !!(window as any).phantom?.solana;
        case 'solflare':
            return !!(window as any).solflare || !!(window as any).solana?.isSolflare;
        case 'glow':
            return !!(window as any).glow || !!(window as any).glowSolana;
        case 'backpack':
            return !!(window as any).backpack || !!(window as any).solana?.isBackpack;
        default:
            return false;
    }
}

let connectedWalletType: WalletType | null = null;
let arrowIcon: SVGElement | null = null;
let walletDropdown: HTMLDivElement | null = null;
let currentSessionKey: string | null = null;

// –ù–û–í–û–ï: —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
let isConnecting = false;
let isValidatingSession = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 3;

function shortenAddress(addr: string) {
    return addr.slice(0, 4) + "..." + addr.slice(-4);
}

function updateWalletButton(address: string) {
    const shortAddr = shortenAddress(address);
    if (walletButtonDesktop) {
        walletButtonDesktop.innerHTML = `
            ${shortAddr}
            <svg id="walletArrow" class="w-5 h-5 ml-2 transition-transform duration-200" fill="none" stroke="currentColor" stroke-width="3" viewBox="0 0 24 24">
                <path d="M6 9l6 6 6-6"/>
            </svg>
        `;
    }
    if (walletButtonMobile) {
        walletButtonMobile.textContent = `${shortAddr} ‚ñº`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º arrow icon –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è innerHTML
    arrowIcon = document.getElementById("walletArrow") as SVGElement;
}

function setArrow(up: boolean) {
    if (!arrowIcon) return;
    arrowIcon.style.transform = up ? "rotate(180deg)" : "rotate(0deg)";
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function loginToServer(walletAddress: string): Promise<string | null> {
    try {
        console.log('üîê Logging in to server:', walletAddress.slice(0, 8) + '...');

        const response = await fetch(`${SERVER_URL}/api/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ walletAddress })
        });

        if (!response.ok) {
            console.error('‚ùå Server login failed - HTTP', response.status);
            return null;
        }

        const data = await response.json();

        if (data.success && data.sessionKey) {
            console.log('‚úÖ Server login successful');
            return data.sessionKey;
        } else {
            console.error('‚ùå Server login failed:', data.error || 'No session key received');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Server login error:', error);
        return null;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
async function validateServerSession(walletAddress: string, sessionKey: string): Promise<boolean> {
    if (isValidatingSession) {
        console.log('‚ö†Ô∏è Validation already in progress, skipping');
        return true; // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    }

    isValidatingSession = true;

    try {
        console.log('üîç Validating server session');

        const response = await fetch(`${SERVER_URL}/api/auth/validate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ walletAddress, sessionKey })
        });

        if (!response.ok) {
            console.error('‚ùå Session validation failed - HTTP', response.status);
            return false;
        }

        const data = await response.json();
        console.log('üì• Validation response:', { success: data.success });

        return data.success;
    } catch (error) {
        console.error('‚ùå Session validation error:', error);
        return false;
    } finally {
        isValidatingSession = false;
    }
}

async function logoutFromServer(walletAddress: string) {
    try {
        await fetch(`${SERVER_URL}/api/auth/logout`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ walletAddress })
        });
        console.log('üö™ Server logout successful');
    } catch (error) {
        console.error('‚ùå Server logout error:', error);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
async function connectWallet(type: WalletType) {
    if (isConnecting) {
        console.log('‚ö†Ô∏è Connection already in progress');
        return;
    }

    isConnecting = true;

    try {
        const adapter = solanaAdapters[type];

        // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setupWalletEventListeners(adapter, type);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ—à–µ–ª—å–∫—É
        await adapter.connect({ onlyIfTrusted: false });
        const publicKey = adapter.publicKey;

        if (publicKey) {
            const walletAddress = publicKey.toBase58();

            // –õ–æ–≥–∏–Ω–∏–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const sessionKey = await loginToServer(walletAddress);

            if (sessionKey) {
                connectedWalletType = type;
                currentSessionKey = sessionKey;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem("connectedWalletType", type);
                localStorage.setItem("connectedWalletAddress", walletAddress);
                localStorage.setItem("sessionKey", sessionKey);

                updateWalletButton(walletAddress);
                closeModal();
                reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

                console.log('‚úÖ Wallet connected and authenticated');
            } else {
                throw new Error('Failed to authenticate with server');
            }
        } else {
            throw new Error('Failed to get public key from wallet');
        }
    } catch (error) {
        console.error('‚ùå Connect wallet error:', error);
        alert('Failed to connect wallet: ' + (error as Error).message);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await handleWalletDisconnect();
    } finally {
        isConnecting = false;
    }
}

// –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–æ—à–µ–ª—å–∫–∞
function setupWalletEventListeners(adapter: any, type: WalletType) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    adapter.removeAllListeners?.();

    adapter.on('connect', (publicKey: any) => {
        console.log(`‚úÖ ${type} wallet connected:`, publicKey?.toBase58()?.slice(0, 8) + '...');
    });

    adapter.on('disconnect', () => {
        console.log(`üîå ${type} wallet disconnected`);
        handleWalletDisconnect();
    });

    adapter.on('error', (error: any) => {
        console.error(`‚ùå ${type} wallet error:`, error);
        handleWalletDisconnect();
    });

    // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    if (adapter.on && typeof adapter.on === 'function') {
        adapter.on('accountChanged', (publicKey: any) => {
            console.log(`üîÑ ${type} account changed:`, publicKey?.toBase58()?.slice(0, 8) + '...');
            // –ü—Ä–∏ —Å–º–µ–Ω–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            setTimeout(() => tryReconnect(), 1000);
        });
    }
}

// –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
async function handleWalletDisconnect() {
    console.log('üîå Handling wallet disconnect');

    if (connectedWalletType) {
        const adapter = solanaAdapters[connectedWalletType];
        const walletAddress = localStorage.getItem("connectedWalletAddress");

        // –õ–æ–≥–∞—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (walletAddress) {
            await logoutFromServer(walletAddress);
        }

        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        connectedWalletType = null;
        currentSessionKey = null;

        localStorage.removeItem("connectedWalletType");
        localStorage.removeItem("connectedWalletAddress");
        localStorage.removeItem("sessionKey");

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (walletButtonDesktop) walletButtonDesktop.textContent = "Connect Wallet";
        if (walletButtonMobile) walletButtonMobile.textContent = "Connect Wallet";
        setArrow(false);
        hideDropdown();
    }
}

// –ù–û–í–û–ï: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function tryReconnect() {
    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
        console.log('‚ùå Max reconnect attempts reached');
        await handleWalletDisconnect();
        return;
    }

    reconnectAttempts++;
    console.log(`üîÑ Reconnection attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`);

    const savedType = localStorage.getItem("connectedWalletType") as WalletType;
    const savedAddress = localStorage.getItem("connectedWalletAddress");
    const savedSessionKey = localStorage.getItem("sessionKey");

    if (savedType && savedAddress && savedSessionKey) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const isValidSession = await validateServerSession(savedAddress, savedSessionKey);

            if (isValidSession) {
                const adapter = solanaAdapters[savedType];

                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (isWalletInstalled(savedType)) {
                    await adapter.connect({ onlyIfTrusted: false });

                    if (adapter.connected && adapter.publicKey) {
                        const currentAddress = adapter.publicKey.toBase58();

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if (currentAddress === savedAddress) {
                            connectedWalletType = savedType;
                            currentSessionKey = savedSessionKey;
                            updateWalletButton(currentAddress);
                            reconnectAttempts = 0;
                            console.log('‚úÖ Reconnection successful');
                            return;
                        }
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå Reconnection failed:', error);
        }
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    await handleWalletDisconnect();
}

function disconnectWallet() {
    handleWalletDisconnect();
}

function openModal() {
    if (walletModal) {
        walletModal.classList.remove("hidden");
        walletModal.classList.add("flex");
    }
}

function closeModal() {
    if (walletModal) {
        walletModal.classList.add("hidden");
        walletModal.classList.remove("flex");
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
window.addEventListener("load", async () => {
    console.log('üöÄ Page loaded, checking wallet connection...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "Installed" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    document.querySelectorAll<HTMLButtonElement>("#walletModal button[data-wallet]").forEach(btn => {
        const walletType = btn.getAttribute("data-wallet") as WalletType;
        const statusSpan = btn.querySelector<HTMLSpanElement>(".wallet-status");

        if (statusSpan) {
            const isInstalled = isWalletInstalled(walletType);

            if (isInstalled) {
                statusSpan.textContent = "Installed";
                statusSpan.classList.remove("bg-crypto-border", "text-gray-300");
                statusSpan.classList.add("bg-green-600/20", "text-green-400", "border", "border-green-600/30");
            } else {
                statusSpan.textContent = "";
                statusSpan.style.display = "none";
            }
        }
    });

    // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 500));

    const savedType = localStorage.getItem("connectedWalletType") as WalletType;
    const savedAddress = localStorage.getItem("connectedWalletAddress");
    const savedSessionKey = localStorage.getItem("sessionKey");

    if (savedType && savedAddress && savedSessionKey) {
        console.log('üîÑ Attempting auto-reconnect...');

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (!isWalletInstalled(savedType)) {
                console.log('‚ùå Wallet not installed');
                await handleWalletDisconnect();
                return;
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const isValidSession = await validateServerSession(savedAddress, savedSessionKey);

            if (isValidSession) {
                const adapter = solanaAdapters[savedType];

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                setupWalletEventListeners(adapter, savedType);

                try {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º onlyIfTrusted: true
                    await adapter.connect({ onlyIfTrusted: true });

                    if (adapter.connected && adapter.publicKey) {
                        const currentAddress = adapter.publicKey.toBase58();

                        if (currentAddress === savedAddress) {
                            connectedWalletType = savedType;
                            currentSessionKey = savedSessionKey;
                            updateWalletButton(currentAddress);
                            console.log('‚úÖ Auto-reconnect successful (trusted)');
                            return;
                        }
                    }
                } catch (trustedError) {
                    console.log('‚ö†Ô∏è Trusted connection failed, trying manual connection...');

                    // –ï—Å–ª–∏ trusted –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    console.log('‚ÑπÔ∏è Wallet requires manual connection');
                    return;
                }
            } else {
                console.log('‚ùå Session invalid, clearing local storage');
                await handleWalletDisconnect();
            }
        } catch (error) {
            console.error('‚ùå Auto-reconnect error:', error);
            await handleWalletDisconnect();
        }
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
walletButtonMobile?.addEventListener("click", () => {
    if (!connectedWalletType) openModal();
});

walletModalClose?.addEventListener("click", closeModal);

walletListButtons.forEach(btn => {
    btn.addEventListener("click", async (e) => {
        const walletType = (e.currentTarget as HTMLButtonElement).getAttribute("data-wallet") as WalletType;
        if (!walletType) return;

        if (!isWalletInstalled(walletType)) {
            alert(`${walletType} wallet is not installed. Please install it first.`);
            return;
        }

        await connectWallet(walletType);
    });
});

// Dropdown logic (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
if (walletButtonDesktop) {
    walletDropdown = document.createElement("div");
    walletDropdown.id = "walletDropdown";
    walletDropdown.className =
        "absolute bg-crypto-card border border-crypto-border rounded-lg w-44 hidden shadow-lg z-50 overflow-hidden transition-all duration-200 opacity-0 pointer-events-none";

    walletDropdown.innerHTML = `
        <button id="logoutButton" class="w-full text-left px-4 py-2 text-red-500 font-medium hover:bg-crypto-border transition flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path d="M17 16l4-4m0 0l-4-4m4 4H7"/>
            </svg>
            Logout
        </button>
    `;

    document.body.appendChild(walletDropdown);

    const positionDropdown = () => {
        if (!walletDropdown || !walletButtonDesktop) return;
        const rect = walletButtonDesktop.getBoundingClientRect();
        walletDropdown.style.top = rect.bottom + window.scrollY + "px";
        walletDropdown.style.left = rect.left + window.scrollX + "px";
    };

    const showDropdown = () => {
        if (!walletDropdown) return;
        positionDropdown();
        walletDropdown.classList.remove("hidden", "opacity-0", "pointer-events-none");
        setArrow(true);
    };

    const hideDropdown = () => {
        if (!walletDropdown) return;
        walletDropdown.classList.add("opacity-0", "pointer-events-none");
        setArrow(false);
        setTimeout(() => walletDropdown?.classList.add("hidden"), 200);
    };

    const logoutBtn = walletDropdown.querySelector<HTMLButtonElement>("#logoutButton");
    logoutBtn?.addEventListener("click", () => {
        disconnectWallet();
        hideDropdown();
    });

    // Hover/click –ª–æ–≥–∏–∫–∞
    let hoverTimer: number | null = null;
    const enter = () => {
        if (!connectedWalletType) return;
        if (hoverTimer) clearTimeout(hoverTimer);
        showDropdown();
    };
    const leave = () => {
        if (hoverTimer) clearTimeout(hoverTimer);
        hoverTimer = window.setTimeout(() => {
            if (!walletDropdown?.matches(":hover") && !walletButtonDesktop?.matches(":hover")) {
                hideDropdown();
            }
        }, 150);
    };

    walletButtonDesktop.addEventListener("mouseenter", enter);
    walletDropdown.addEventListener("mouseenter", enter);
    walletButtonDesktop.addEventListener("mouseleave", leave);
    walletDropdown.addEventListener("mouseleave", leave);

    walletButtonDesktop.addEventListener("click", () => {
        if (!connectedWalletType) openModal();
    });
}

// –ù–û–í–û–ï: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    if (event.error?.message?.includes('wallet')) {
        console.error('üî• Wallet-related error detected:', event.error);
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º disconnect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
});

// –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible' && connectedWalletType) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏–¥–∏–º–æ–π
        setTimeout(() => {
            const savedAddress = localStorage.getItem("connectedWalletAddress");
            const savedSessionKey = localStorage.getItem("sessionKey");

            if (savedAddress && savedSessionKey && !isValidatingSession) {
                validateServerSession(savedAddress, savedSessionKey).then(isValid => {
                    if (!isValid) {
                        console.log('‚ö†Ô∏è Session expired while page was hidden');
                        handleWalletDisconnect();
                    }
                });
            }
        }, 1000);
    }
});